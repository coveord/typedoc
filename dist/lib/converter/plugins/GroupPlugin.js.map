{"version":3,"file":"GroupPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/GroupPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reflection, ReflectionKind, ContainerReflection, DeclarationReflection } from '../../models/reflections/index';\r\nimport { ReflectionGroup } from '../../models/ReflectionGroup';\r\nimport { SourceDirectory } from '../../models/sources/directory';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\n\r\nconst camelCaseToHyphenRegex = /([A-Z])|\\W+(\\w)/g;\r\n\r\n/**\r\n * A handler that sorts and groups the found reflections in the resolving phase.\r\n *\r\n * The handler sets the ´groups´ property of all reflections.\r\n */\r\n@Component({name: 'group'})\r\nexport class GroupPlugin extends ConverterComponent {\r\n    /**\r\n     * Define the sort order of reflections.\r\n     */\r\n    static WEIGHTS = [\r\n        ReflectionKind.Global,\r\n        ReflectionKind.ExternalModule,\r\n        ReflectionKind.Module,\r\n        ReflectionKind.Enum,\r\n        ReflectionKind.EnumMember,\r\n        ReflectionKind.Class,\r\n        ReflectionKind.Interface,\r\n        ReflectionKind.TypeAlias,\r\n        ReflectionKind.Method,\r\n\r\n        ReflectionKind.Event,\r\n        ReflectionKind.Property,\r\n        ReflectionKind.Variable,\r\n        ReflectionKind.Function,\r\n        ReflectionKind.Accessor,\r\n        ReflectionKind.ObjectLiteral,\r\n        ReflectionKind.Constructor,\r\n\r\n        ReflectionKind.Parameter,\r\n        ReflectionKind.TypeParameter,\r\n        ReflectionKind.TypeLiteral,\r\n        ReflectionKind.CallSignature,\r\n        ReflectionKind.ConstructorSignature,\r\n        ReflectionKind.IndexSignature,\r\n        ReflectionKind.GetSignature,\r\n        ReflectionKind.SetSignature\r\n    ];\r\n\r\n    /**\r\n     * Define the singular name of individual reflection kinds.\r\n     */\r\n    static SINGULARS = (function() {\r\n        const singulars = {};\r\n        singulars[ReflectionKind.Enum]       = 'Enumeration';\r\n        singulars[ReflectionKind.EnumMember] = 'Enumeration member';\r\n        return singulars;\r\n    })();\r\n\r\n    /**\r\n     * Define the plural name of individual reflection kinds.\r\n     */\r\n    static PLURALS = (function() {\r\n        const plurals = {};\r\n        plurals[ReflectionKind.Class]      = 'Classes';\r\n        plurals[ReflectionKind.Property]   = 'Properties';\r\n        plurals[ReflectionKind.Enum]       = 'Enumerations';\r\n        plurals[ReflectionKind.EnumMember] = 'Enumeration members';\r\n        plurals[ReflectionKind.TypeAlias] = 'Type aliases';\r\n        return plurals;\r\n    })();\r\n\r\n    /**\r\n     * Create a new GroupPlugin instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_RESOLVE]: this.onResolve,\r\n            [Converter.EVENT_RESOLVE_END]: this.onEndResolve\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter resolves a reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently resolved.\r\n     */\r\n    private onResolve(context: Context, reflection: Reflection) {\r\n        reflection.kindString = GroupPlugin.getKindSingular(reflection.kind);\r\n\r\n        if (reflection instanceof ContainerReflection) {\r\n            const container = <ContainerReflection> reflection;\r\n            if (container.children && container.children.length > 0) {\r\n                container.children.sort(GroupPlugin.sortCallback);\r\n                container.groups = GroupPlugin.getReflectionGroups(container.children);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has finished resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onEndResolve(context: Context) {\r\n        function walkDirectory(directory: SourceDirectory) {\r\n            directory.groups = GroupPlugin.getReflectionGroups(directory.getAllReflections());\r\n\r\n            for (let key in directory.directories) {\r\n                if (!directory.directories.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                walkDirectory(directory.directories[key]);\r\n            }\r\n        }\r\n\r\n        const project = context.project;\r\n        if (project.children && project.children.length > 0) {\r\n            project.children.sort(GroupPlugin.sortCallback);\r\n            project.groups = GroupPlugin.getReflectionGroups(project.children);\r\n        }\r\n\r\n        walkDirectory(project.directory);\r\n        project.files.forEach((file) => {\r\n            file.groups = GroupPlugin.getReflectionGroups(file.reflections);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a grouped representation of the given list of reflections.\r\n     *\r\n     * Reflections are grouped by kind and sorted by weight and name.\r\n     *\r\n     * @param reflections  The reflections that should be grouped.\r\n     * @returns An array containing all children of the given reflection grouped by their kind.\r\n     */\r\n    static getReflectionGroups(reflections: Reflection[]): ReflectionGroup[] {\r\n        const groups: ReflectionGroup[] = [];\r\n        reflections.forEach((child) => {\r\n            for (let i = 0; i < groups.length; i++) {\r\n                const group = groups[i];\r\n                if (group.kind !== child.kind) {\r\n                    continue;\r\n                }\r\n\r\n                group.children.push(child);\r\n                return;\r\n            }\r\n\r\n            const group = new ReflectionGroup(GroupPlugin.getKindPlural(child.kind), child.kind);\r\n            if (child.flags.isCoveoComponentOptions) {\r\n                group.title = 'Component Options';\r\n            }\r\n            group.children.push(child);\r\n            if (group.title === 'Component Options') {\r\n                if (group.children[0]['children']) {\r\n                    group.children = group.children[0]['children'];\r\n                    group.children.forEach((child) => {\r\n                        if (child.name) {\r\n                            if (child['type']) {\r\n                                let valuesExamples = GroupPlugin.getMarkupValueExampleFromType(child['type'].name, child);\r\n                                child.markupExample = valuesExamples.map((example) => {\r\n                                    return `data-${child.name.replace(camelCaseToHyphenRegex, '-$1$2').toLowerCase()}='${example}'`;\r\n                                }).join('\\n');\r\n                                if (child.markupExample === '') {\r\n                                    child.markupExample = null;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (child.comment.hasTag('notsupportedin')) {\r\n                            let tag = child.comment.getTag('notsupportedin');\r\n                            tag.tagName = 'Not supported in';\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            groups.push(group);\r\n        });\r\n\r\n        groups.forEach((group) => {\r\n            let someExported = false, allInherited = true, allPrivate = true, allProtected = true, allExternal = true;\r\n            group.children.forEach((child) => {\r\n                someExported = child.flags.isExported || someExported;\r\n                allPrivate = child.flags.isPrivate && allPrivate;\r\n                allProtected = (child.flags.isPrivate || child.flags.isProtected) && allProtected;\r\n                allExternal = child.flags.isExternal && allExternal;\r\n\r\n                if (child instanceof DeclarationReflection) {\r\n                    allInherited = child.inheritedFrom && allInherited;\r\n                } else {\r\n                    allInherited = false;\r\n                }\r\n            });\r\n\r\n            group.someChildrenAreExported = someExported;\r\n            group.allChildrenAreInherited = allInherited;\r\n            group.allChildrenArePrivate = allPrivate;\r\n            group.allChildrenAreProtectedOrPrivate = allProtected;\r\n            group.allChildrenAreExternal = allExternal;\r\n        });\r\n\r\n        return groups;\r\n    }\r\n\r\n    private static getMarkupValueExampleFromType(name: string, ref: Reflection): string[] {\r\n        let ret = [];\r\n        if (ref && ref['type'] && ref['type'].constructor.name.toLowerCase() === 'uniontype') {\r\n            ret = GroupPlugin.getMarkupValueExampleForUnionType(ref);\r\n        } else if (name) {\r\n            switch (name.toLowerCase()) {\r\n                case 'boolean':\r\n                    ret = ['true', 'false'];\r\n                    break;\r\n                case 'string':\r\n                    ret = ['foo'];\r\n                    break;\r\n                case 'ifieldoption':\r\n                    ret = ['@foo'];\r\n                    break;\r\n                case 'number':\r\n                    ret = ['10'];\r\n                    break;\r\n                case 'array':\r\n                    if (ref['type'] && ref['type'].typeArguments && ref['type'].typeArguments[0]) {\r\n                        ret = GroupPlugin.getMarkupValueExampleFromType(ref['type'].typeArguments[0].name, ref);\r\n                        ret = ret.map((example) => {\r\n                            return `${example},${example}2`;\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    private static getMarkupValueExampleForUnionType = function (ref) {\r\n        let ret = [];\r\n        if (ref && ref.type && ref.type.types[0] && ref.type.types[0].typeArguments && ref.type.types[0].typeArguments[0]) {\r\n            if (ref.type.types[0].typeArguments[0].constructor.name.toLowerCase() === 'uniontype') {\r\n                ret = ref.type.types[0].typeArguments[0].types.map(function (type) {\r\n                    return type.value;\r\n                });\r\n                if (ref.type.types[0].name && ref.type.types[0].name.toLowerCase() === 'array') {\r\n                    let copy = [];\r\n                    for (let i = 0; i < ret.length; i++) {\r\n                        copy[i] = ret.slice(0, i + 1).join(',');\r\n                    }\r\n                    ret = copy;\r\n                }\r\n                ret = ret.slice(0, 4);\r\n            } else {\r\n                ret = GroupPlugin.getMarkupValueExampleFromType(ref.type.types[0].typeArguments[0].name, undefined);\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n\r\n    /**\r\n     * Transform the internal typescript kind identifier into a human readable version.\r\n     *\r\n     * @param kind  The original typescript kind identifier.\r\n     * @returns A human readable version of the given typescript kind identifier.\r\n     */\r\n    private static getKindString(kind: ReflectionKind): string {\r\n        let str = ReflectionKind[kind];\r\n        str = str.replace(/(.)([A-Z])/g, (m, a, b) => a + ' ' + b.toLowerCase());\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Return the singular name of a internal typescript kind identifier.\r\n     *\r\n     * @param kind The original internal typescript kind identifier.\r\n     * @returns The singular name of the given internal typescript kind identifier\r\n     */\r\n    static getKindSingular(kind: ReflectionKind): string {\r\n        if (GroupPlugin.SINGULARS[kind]) {\r\n            return GroupPlugin.SINGULARS[kind];\r\n        } else {\r\n            return GroupPlugin.getKindString(kind);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the plural name of a internal typescript kind identifier.\r\n     *\r\n     * @param kind The original internal typescript kind identifier.\r\n     * @returns The plural name of the given internal typescript kind identifier\r\n     */\r\n    static getKindPlural(kind: ReflectionKind): string {\r\n        if (GroupPlugin.PLURALS[kind]) {\r\n            return GroupPlugin.PLURALS[kind];\r\n        } else {\r\n            return this.getKindString(kind) + 's';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback used to sort reflections by weight defined by ´GroupPlugin.WEIGHTS´ and name.\r\n     *\r\n     * @param a The left reflection to sort.\r\n     * @param b The right reflection to sort.\r\n     * @returns The sorting weight.\r\n     */\r\n    static sortCallback(a: Reflection, b: Reflection): number {\r\n        const aWeight = GroupPlugin.WEIGHTS.indexOf(a.kind);\r\n        const bWeight = GroupPlugin.WEIGHTS.indexOf(b.kind);\r\n        if (aWeight === bWeight) {\r\n            if (a.flags.isStatic && !b.flags.isStatic) {\r\n                return 1;\r\n            }\r\n            if (!a.flags.isStatic && b.flags.isStatic) {\r\n                return -1;\r\n            }\r\n            if (a.name === b.name) {\r\n                return 0;\r\n            }\r\n            return a.name > b.name ? 1 : -1;\r\n        } else {\r\n            return aWeight - bWeight;\r\n        }\r\n    }\r\n}\r\n"]}